[{"/Users/qingyuan/athena/src/index.js":"1","/Users/qingyuan/athena/src/App.js":"2","/Users/qingyuan/athena/src/components/patient-form/patient-form.component.js":"3","/Users/qingyuan/athena/src/components/header/header.component.js":"4","/Users/qingyuan/athena/src/components/patient-info-bill/patient-info-bill.component.js":"5","/Users/qingyuan/athena/src/components/medical-scan-deatils/medical-scan-details.component.js":"6","/Users/qingyuan/athena/src/components/medical-scan-deatils/medical-scan-table/medical-scan-table.component.js":"7","/Users/qingyuan/athena/src/components/medical-scan-deatils/medical-scan-list/medical-scan-list.component.js":"8","/Users/qingyuan/athena/src/redux/store.js":"9","/Users/qingyuan/athena/src/redux/root-reducer.js":"10","/Users/qingyuan/athena/src/redux/user/user.reducer.js":"11","/Users/qingyuan/athena/src/redux/user/user.types.js":"12","/Users/qingyuan/athena/src/static.data.js":"13","/Users/qingyuan/athena/src/components/button/custom-button.component.js":"14","/Users/qingyuan/athena/src/redux/user/user.actions.js":"15","/Users/qingyuan/athena/src/components/utils/autocomplete/autocomplete.component.js":"16","/Users/qingyuan/athena/src/redux/medical-scan/medical-scan.reducer.js":"17","/Users/qingyuan/athena/src/redux/medical-scan/medical-scan.types.js":"18","/Users/qingyuan/athena/src/redux/medical-scan/medical-scan.actions.js":"19","/Users/qingyuan/athena/src/redux/appointments/appointments.reducer.js":"20","/Users/qingyuan/athena/src/redux/appointments/appointments.types.js":"21","/Users/qingyuan/athena/src/redux/appointments/appointments.actions.js":"22","/Users/qingyuan/athena/src/components/appointments/appointments.component.js":"23","/Users/qingyuan/athena/src/components/appointments/appointments.top.bar.component.js":"24","/Users/qingyuan/athena/src/components/appointments/appointments.bottom.table.component.js":"25","/Users/qingyuan/athena/src/redux/filter-info/filter-info.actions.js":"26","/Users/qingyuan/athena/src/redux/filter-info/filter-info.types.js":"27","/Users/qingyuan/athena/src/redux/filter-info/filter-info.reducer.js":"28","/Users/qingyuan/athena/src/components/transactions-page/transactions-page.component.js":"29","/Users/qingyuan/athena/src/components/transactions-page/transactions.top.component.js":"30","/Users/qingyuan/athena/src/components/transactions-page/transactions.bottom.component.js":"31","/Users/qingyuan/athena/src/components/transactions-page/transactions-page-tables/transactions-page-prev-table.component.js":"32","/Users/qingyuan/athena/src/components/transactions-page/transactions-page-tables/transactions-page-current-table.component.js":"33","/Users/qingyuan/athena/src/redux/transactions/transactions.reducer.js":"34","/Users/qingyuan/athena/src/redux/transactions/transactions.types.js":"35","/Users/qingyuan/athena/src/redux/transactions/transactions.actions.js":"36","/Users/qingyuan/athena/src/components/transactions-page/transactions-pages-form/transactions-pages-form.component.js":"37"},{"size":427,"mtime":1612064388230,"results":"38","hashOfConfig":"39"},{"size":799,"mtime":1612139569080,"results":"40","hashOfConfig":"39"},{"size":7741,"mtime":1612199459698,"results":"41","hashOfConfig":"39"},{"size":215,"mtime":1611891190549,"results":"42","hashOfConfig":"39"},{"size":2049,"mtime":1612195684335,"results":"43","hashOfConfig":"39"},{"size":715,"mtime":1612050958054,"results":"44","hashOfConfig":"39"},{"size":2276,"mtime":1612124598904,"results":"45","hashOfConfig":"39"},{"size":5779,"mtime":1612199332915,"results":"46","hashOfConfig":"39"},{"size":335,"mtime":1612026308013,"results":"47","hashOfConfig":"39"},{"size":609,"mtime":1612142701949,"results":"48","hashOfConfig":"39"},{"size":666,"mtime":1612109785374,"results":"49","hashOfConfig":"39"},{"size":130,"mtime":1612067297645,"results":"50","hashOfConfig":"39"},{"size":2916,"mtime":1612191070304,"results":"51","hashOfConfig":"39"},{"size":375,"mtime":1611948093577,"results":"52","hashOfConfig":"39"},{"size":402,"mtime":1612109667865,"results":"53","hashOfConfig":"39"},{"size":1008,"mtime":1612190356946,"results":"54","hashOfConfig":"39"},{"size":3512,"mtime":1612164389049,"results":"55","hashOfConfig":"39"},{"size":782,"mtime":1612164631869,"results":"56","hashOfConfig":"39"},{"size":2785,"mtime":1612164710745,"results":"57","hashOfConfig":"39"},{"size":1101,"mtime":1612195554930,"results":"58","hashOfConfig":"39"},{"size":301,"mtime":1612195554930,"results":"59","hashOfConfig":"39"},{"size":2045,"mtime":1612200323858,"results":"60","hashOfConfig":"39"},{"size":1078,"mtime":1612117423512,"results":"61","hashOfConfig":"39"},{"size":3353,"mtime":1612134149079,"results":"62","hashOfConfig":"39"},{"size":5004,"mtime":1612188583062,"results":"63","hashOfConfig":"39"},{"size":250,"mtime":1612119595496,"results":"64","hashOfConfig":"39"},{"size":104,"mtime":1612119048479,"results":"65","hashOfConfig":"39"},{"size":505,"mtime":1612125510359,"results":"66","hashOfConfig":"39"},{"size":1123,"mtime":1612161694282,"results":"67","hashOfConfig":"39"},{"size":923,"mtime":1612142061915,"results":"68","hashOfConfig":"39"},{"size":371,"mtime":1612146443007,"results":"69","hashOfConfig":"39"},{"size":1941,"mtime":1612194869901,"results":"70","hashOfConfig":"39"},{"size":3081,"mtime":1612192809821,"results":"71","hashOfConfig":"39"},{"size":1432,"mtime":1612196769712,"results":"72","hashOfConfig":"39"},{"size":402,"mtime":1612196703420,"results":"73","hashOfConfig":"39"},{"size":1952,"mtime":1612196781292,"results":"74","hashOfConfig":"39"},{"size":7389,"mtime":1612200861798,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"19062al",{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"78"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"78"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"78"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"78"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"78"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"78"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"78"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"78"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"78"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"78"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"78"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"78"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"78"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"78"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"78"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"78"},"/Users/qingyuan/athena/src/index.js",[],["168","169"],"/Users/qingyuan/athena/src/App.js",["170","171"],"import React, { Fragment, useEffect } from 'react';\nimport './App.scss';\nimport PatientInfoBill from './components/patient-info-bill/patient-info-bill.component';\nimport Appointments from './components/appointments/appointments.component';\nimport TransactionsPage from './components/transactions-page/transactions-page.component';\n\nimport {\n    BrowserRouter,\n    Switch,\n    Route,\n  } from \"react-router-dom\";\n\nconst App = () => {\n    return (\n        <BrowserRouter>\n            <Fragment>\n                <Route exact path='/' component={PatientInfoBill} />\n                <Route exact path='/appointments' component={Appointments} />\n                <Route exact path='/transactions' component={TransactionsPage}/>\n            </Fragment>\n        </BrowserRouter>\n    )\n};\n\nexport default App;","/Users/qingyuan/athena/src/components/patient-form/patient-form.component.js",["172","173"],"import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport moment from 'moment';\nimport './patient-form.styles.scss';\nimport { country_list, ageTypes } from '../../static.data';\n\nimport Header from '../header/header.component';\nimport CustomButton from '../button/custom-button.component';\nimport { setCurrentPatientInfo, getCurrentPatientInfo } from '../../redux/user/user.actions';\n\nconst PatientForm = ({ setCurrentPatientInfo, getCurrentPatientInfo }) => {\n\n    const [userInfo, setUserInfo] = useState(\n        {\n            prefix: '',\n            name: '', gender: '',\n            dob: '', age: '',\n            ageType: '',\n            appointmentDate: '',\n            phone: '',\n            address: {\n                street1: '',\n                street2: '',\n                city: '',\n                state: '',\n                zipcode: '',\n                country: ''\n            }\n        }\n    );\n\n    useEffect(() => {\n        setCurrentPatientInfo(userInfo);\n    },[userInfo]);\n\n    const handleChange = (e) => {\n        let { value, name } = e.target;\n        const isInAddressFields = Object.keys(userInfo.address).includes(name);\n        if(isInAddressFields) {\n            setUserInfo({\n                ...userInfo,\n                address: {\n                    ...userInfo.address,\n                    [name]: value\n                }\n            });\n        } else if (name === 'dob') {\n            const year = moment().diff(\n                moment(userInfo.dob, \"YYYY-MM-DD\"),\n                'years'\n            );\n            // const type = ageTypes.filter(\n            //     data => data.min <= year && data.max >= year\n            // )[0].category;\n            setUserInfo({\n                ...userInfo,\n                [name]: value,\n                \"age\": year.toString()\n            });\n        } else if (name === 'prefix') {\n            if (value === 'mr') {\n                setUserInfo({\n                    ...userInfo,\n                    [name]: value,\n                    \"gender\": 'male'\n                });\n            } else {\n                setUserInfo({\n                    ...userInfo,\n                    [name]: value,\n                    \"gender\": 'female'\n                });\n            }\n        } \n        else {\n            setUserInfo({\n                ...userInfo,\n                [name]: value\n            });\n        };\n    };\n    return (\n        <div>\n            <Header text='Patient Details' />\n            <div className='patient-form'>\n                <div className=\"form__labels form__labels--col1\">\n                    <label htmlFor=\"name\">Patient name</label>\n                    <label htmlFor=\"dob\">DOB</label>\n                    <label htmlFor=\"appointment-date\">Appointment Date</label>\n                </div>\n                <div className=\"form__inputs form__inputs--col1\">\n                    <div className='row-container'>\n                        <select name=\"prefix\" id=\"prefix\" onChange={handleChange} required>\n                            <option disabled selected value> -- select an option -- </option>\n                            <option value=\"mr\">Mr</option>\n                            <option value=\"mrs\">Mrs</option>\n                            <option value=\"miss\">Ms</option>\n                        </select>\n                        <input type=\"text\" name='name' id=\"name\" onChange={handleChange} required/>\n                    </div>\n                    <input type=\"date\" name='dob' id=\"dob\" onChange={handleChange} required/>\n                    <input type=\"date\" name='appointmentDate' id=\"appointmentDate\" onChange={handleChange} required/>\n                </div>\n\n                <div className=\"form__labels form__labels--col2\">\n                    <label>Gender</label>\n                    <label htmlFor=\"age\">Age</label>\n                    <label htmlFor=\"phone\">Phone</label>\n                </div>\n                <div className=\"form__inputs form__inputs--col2\">\n                    <div className='row-container'>\n                        <div>   \n                            <input \n                                type=\"radio\" \n                                name=\"gender\" \n                                value='male'\n                                onChange={handleChange} \n                                checked={userInfo.gender === 'male' ? 'checked' : null}\n                            />\n                            <label>Male</label>\n                        </div>\n                        <div>\n                            <input \n                                type=\"radio\" \n                                name=\"gender\" \n                                value='female' \n                                onChange={handleChange}\n                                checked={userInfo.gender === 'female' ? 'checked' : null}\n                            />\n                            <label>Female</label>\n                        </div>\n                    </div>\n                    <div className='row-container'>\n                        <input \n                            type=\"number\" \n                            name='age' \n                            id=\"age\" \n                            min=\"0\" \n                            value={userInfo.age}\n                            onChange={handleChange} \n                            required/>\n                        <select name='ageType' id=\"ageType\" onChange={handleChange}>\n                            {\n                                ageTypes.map((type, index) => (\n                                    <option key={index} value={type.category}>\n                                        {type.category}\n                                    </option>\n                                ))\n                            }\n                        </select>\n                    </div>\n                    <input type=\"text\" name='phone' id=\"phone\" onChange={handleChange} required/>\n                </div>\n\n                <div className=\"form__labels form__labels--col3\">\n                    <label htmlFor=\"address1\">Address</label>\n                </div>\n                <div className=\"form__inputs form__inputs--col3\">\n                    <input type=\"text\" id=\"address1\" name='street1' placeholder='Street Address' onChange={handleChange} required/>\n                    <input type=\"text\" id=\"address2\" name='street2' placeholder='Street Address 2' onChange={handleChange} />\n                    <div>\n                        <input type=\"text\" id=\"city\" name='city' placeholder='City' onChange={handleChange} required/>\n                        <input type=\"text\" id=\"state\" name='state' placeholder='State' onChange={handleChange} required/>\n                    </div>\n                    <div>\n                        <input type=\"text\" id=\"zipcode\" name='zipcode' placeholder='Postal/Zipcode' onChange={handleChange} required/>\n                        <select id='country' name='country' onChange={handleChange} required>\n\n                            {\n                                country_list.map((country, index) => (\n                                    <option key={index} value={country.toLowerCase()}>\n                                        {country}\n                                    </option>\n                                ))\n                            }\n                        </select>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n};\n\n// const mapDispatchToProps = (dispatch) => ({\n//     setCurrentPatientInfo: userInfo => dispatch(setCurrentPatientInfo(userInfo))\n// })\n\nexport default connect(null, { getCurrentPatientInfo, setCurrentPatientInfo })(PatientForm);","/Users/qingyuan/athena/src/components/header/header.component.js",[],"/Users/qingyuan/athena/src/components/patient-info-bill/patient-info-bill.component.js",[],"/Users/qingyuan/athena/src/components/medical-scan-deatils/medical-scan-details.component.js",["174","175"],"import React from 'react';\nimport './medical-scan-details.styles.scss';\n\nimport Header from '../header/header.component';\nimport PatientForm from '../patient-form/patient-form.component';\nimport MedicalScanList from './medical-scan-list/medical-scan-list.component';\nimport MedicalScanTable from './medical-scan-table/medical-scan-table.component';\nimport CustomButton from '../button/custom-button.component';\n\nconst MedicalScanDetails = () => {\n    return (\n        <div>\n            <Header text='Medical Scan Details' />\n            <div className='container'>\n                <MedicalScanList />\n                <MedicalScanTable />\n            </div>\n        </div>\n    )\n}\n\nexport default MedicalScanDetails;","/Users/qingyuan/athena/src/components/medical-scan-deatils/medical-scan-table/medical-scan-table.component.js",["176"],"import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\n\nimport { deleteSelectedScanRecord } from '../../../redux/medical-scan/medical-scan.actions';\n \nconst MedicalScanTable = ({ records, deleteSelectedScanRecord }) => {\n\n    const columns = [{\n        dataField: 'sno',\n        text: 'Sno'\n    }, {\n        dataField: 'name',\n        text: 'Scan Name'\n    }, {\n        dataField: 'amount',\n        text: 'Scan Amount'\n    }, {\n        dataField: 'discount',\n        text: 'Scan Discount'\n    }, {\n        dataField: 'total',\n        text: 'Total'\n    }];\n\n\n    const selectRow = {\n        mode: 'radio',\n        clickToSelect: true,\n        style: { backgroundColor: '#00b4cc' }\n    };\n\n    const updatedRecords = records.length > 0 \n    ? records.map((record, idx) => ({\n        ...record,\n        sno: idx\n    }))\n    : [{\n        sno: '',\n        scan_name: '',\n        scan_amount: '',\n        scan_discount: '',\n        total: ''\n    }];\n\n    const rowEvents = {\n        onClick: (e, row, rowIndex) => {\n            // console.log(e.target);\n            // console.log(row);\n            // console.log(rowIndex);\n            deleteSelectedScanRecord(rowIndex);\n        }\n      };\n\n    return (\n        <div className='table-components'>\n            <div className='medical-detail-table'>\n                {\n                    records.length > 0\n                    ? <BootstrapTable\n                    keyField='sno'\n                    data={updatedRecords}\n                    columns={columns}\n                    selectRow={selectRow}\n                    bstriped\n                    hover\n                    condensed\n                    rowClasses=\"custom-row-class\"\n                    headerClasses=\"custom-header-class\"\n                    rowEvents={ rowEvents }\n                    pagination={ paginationFactory() }\n                />\n                : ''\n                }\n                \n            </div>\n        </div>\n    )\n};\n\nconst mapStateToProps = (state) => ({\n    records: state.medicalScans.records\n})\n\n\nexport default connect(mapStateToProps, { deleteSelectedScanRecord })(MedicalScanTable);","/Users/qingyuan/athena/src/components/medical-scan-deatils/medical-scan-list/medical-scan-list.component.js",["177","178","179","180","181"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport Autocomplete from '../../utils/autocomplete/autocomplete.component';\nimport {\n    initializedScanListRelatedFields,\n    addMedicalScanRecord,\n    updateRunningAmount,\n    updateRunningDiscount,\n    updateCurrentFieldsAndAddRecord\n} from '../../../redux/medical-scan/medical-scan.actions';\nimport { getAllUserAppointments } from '../../../redux/appointments/appointments.actions';\n\nimport axios from 'axios';\n\n\nconst MedicalScanList = ({\n    scan_list, original_amount, original_discount,\n    running_discount, running_amount,\n    current_amount, current_discount,\n    modality,\n    records,\n    initializedScanListRelatedFields,\n    updateRunningAmount,\n    updateRunningDiscount,\n    updateCurrentFieldsAndAddRecord,\n    dispatch\n}) => {\n    const [scanTypes, setScanTypes] = useState([]);\n    const [scanAmountDiscount, setScanAmountDiscount] = useState({\n        amount: 0,\n        discount: 0\n    });\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setScanAmountDiscount({\n            ...scanAmountDiscount,\n            [name]: value\n        });\n        if (name === 'amount') {\n            updateRunningAmount(parseInt(value))\n        } else {\n            updateRunningDiscount(parseInt(value))\n        }\n    };\n\n    const autoCompleteOnChange = (e) => {\n        const { name, value } = e.target;\n        const filteredOnes = scanTypes.filter(\n            option => option.includes(value.toUpperCase())\n        );\n        // intialized the autocomplate choices and amount and discount range\n        initializedScanListRelatedFields(value);\n    };\n\n    const handleClick = (e) => {\n        // Validate if slots are exceeed\n        const mri_number = records.filter(record => record.modality === 'MRI').length\n        const ct_number = records.filter(record => record.modality === 'CT').length\n        if (mri_number === 6) {\n            alert('Sorry! In a day only 6 MRI billings are allowed!')\n        }\n        else if (ct_number === 7) {\n            alert('Sorry! In a day only 7 CT billings are allowed!')\n        }\n        else {\n            // Validate if  discount is valid\n            if (parseInt(running_discount) > original_discount) {\n                alert('Sorry we cannt process this discount number!')\n            }\n            // Validate if scan_list is valid\n            else if (!scanTypes.includes(scan_list)) {\n                alert('Sorry we dont have this Scan Test Yet!')\n            } else {\n                // finally update current amount & discount \n                const amount = running_amount === 0 ? original_amount : running_amount;\n                const discount = running_discount === 0 ? 0 : running_discount;\n                // Add record\n                updateCurrentFieldsAndAddRecord(scan_list, amount, discount, modality);\n            }\n        }\n    };\n\n    // get all scan types\n    useEffect(async () => {\n        // fetch types autocomplete\n        const res = await axios.get('/scans');\n        const types = res.data.map(scan => scan.name);\n        setScanTypes(types);\n    }, [original_amount, original_discount]);\n\n\n    return (\n        <div className='scan-components'>\n            <div className='medical-detail-form'>\n                <Autocomplete\n                    type='select'\n                    name='scan-list'\n                    label='Scan List'\n                    options={scanTypes}\n                    onChange={autoCompleteOnChange}\n                    required\n                />\n                <div className='medical-detail-form-container'>\n                    <label htmlFor=\"amount\">Scan Amount</label>\n                    <input\n                        type=\"number\"\n                        name=\"amount\"\n                        label='Scan Amount'\n                        id=\"amount\"\n                        max={original_amount.toString()}\n                        min={(original_amount - original_discount).toString()}\n                        onChange={handleChange}\n                        value={\n                            scanAmountDiscount.amount === 0\n                                ? original_amount : scanAmountDiscount.amount}\n                        required\n                    />\n                </div>\n                <div className='medical-detail-form-container'>\n                    <label htmlFor=\"discount\">Discount</label>\n                    <input\n                        type=\"number\"\n                        name=\"discount\"\n                        label='Discount'\n                        id=\"discount\"\n                        max={original_discount}\n                        min='0'\n                        onChange={handleChange}\n                    />\n                    <div>\n                        <button type='button' onClick={handleClick}>Add</button>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n    )\n}\n\nconst mapStateTpProps = (state) => ({\n    scan_list: state.medicalScans.scans.scan_list,\n    modality: state.medicalScans.scans.modality,\n    original_amount: state.medicalScans.scans.original_amount,\n    original_discount: state.medicalScans.scans.original_discount,\n    running_amount: state.medicalScans.scans.running_amount,\n    running_discount: state.medicalScans.scans.running_discount,\n    current_amount: state.medicalScans.scans.current_amount,\n    current_discount: state.medicalScans.scans.current_discount,\n\n    records: state.medicalScans.records\n});\n\nexport default connect(\n    mapStateTpProps,\n    {\n        initializedScanListRelatedFields,\n        updateRunningAmount,\n        updateRunningDiscount,\n        updateCurrentFieldsAndAddRecord\n    })(MedicalScanList);","/Users/qingyuan/athena/src/redux/store.js",[],"/Users/qingyuan/athena/src/redux/root-reducer.js",[],"/Users/qingyuan/athena/src/redux/user/user.reducer.js",[],"/Users/qingyuan/athena/src/redux/user/user.types.js",[],"/Users/qingyuan/athena/src/static.data.js",[],"/Users/qingyuan/athena/src/components/button/custom-button.component.js",["182"],"import React, { Children } from 'react';\nimport './custom-button.styles.scss';\n\nconst CustomButton = ({ children, ...props }) => {\n    // children here represnt every between the open and closing brackets. for here is: `sign in`\n    return (\n        <button className='custom-button' {...props}>\n             {children}\n        </button>\n    )\n}\n\nexport default CustomButton;","/Users/qingyuan/athena/src/redux/user/user.actions.js",[],"/Users/qingyuan/athena/src/components/utils/autocomplete/autocomplete.component.js",["183"],"import React, { useState } from 'react';\n\nimport './autocomplete.styles.scss';\n\nconst Autocomplete = ({ name, label, options, onChange, ...otherProps }) => { \n    return (\n        options\n        ? <div className='medical-detail-form-container'>\n            <label htmlFor={name}>{label}</label>\n            <input list={name + name} name={name} id={name} onChange={onChange} {...otherProps} />\n            {\n                options.length > 0 &&\n                <datalist id={name + name}>\n                    {\n                        options.map((item, key) =>\n                            <option key={key} value={item} className='option' />\n                        )\n                    }\n                </datalist>\n            }\n        </div>\n        : <div className='medical-detail-form-container'>\n        <label htmlFor={name}>{label}</label>\n        <input\n            name={name}\n            id={name}\n            {...otherProps}\n        />\n        </div>\n    )\n\n};\n\nexport default Autocomplete;","/Users/qingyuan/athena/src/redux/medical-scan/medical-scan.reducer.js",["184"],"import MedicalScanTypes from './medical-scan.types';\n\nconst INITIAL_STATE = {\n    scans: {\n        scan_list: null,\n        modality: null,\n        // amount: null,\n        // discount: null\n        original_amount: 0,\n        original_discount: 0,\n        running_amount: 0,\n        running_discount: 0,\n        current_modality: null,\n        current_amount: 0,\n        current_discount: 0\n    },\n    records: [],\n    errorMessage: null\n};\n\n\nconst medicalScanReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case MedicalScanTypes.ADD_SCAN_RECORD:\n            return {\n                ...state,\n                records: [...state.records, action.payload]\n            };\n        case MedicalScanTypes.DELETE_SCAN_RECORD:\n            state.records.splice(action.payload, 1)\n            return {\n                ...state,\n                records: [...state.records]\n            };\n        case MedicalScanTypes.UPDATE_SCAN_LIST_FIELD:\n            return {\n                ...state,\n                scans: {\n                    ...state.scans,\n                    scan_list: action.payload\n                }\n            }\n        case MedicalScanTypes.UPDATE_SCAN_MODALITY:\n            return {\n                ...state,\n                scans: {\n                    ...state.scans,\n                    modality: action.payload\n                } \n            };\n\n        case MedicalScanTypes.UPDATE_ORIGINAL_SCAN_AMOUNT_FIELD:\n            return {\n                ...state,\n                scans: {\n                    ...state.scans,\n                    original_amount: action.payload\n                }\n            }\n        case MedicalScanTypes.UPDATE_ORIGINAL_SCAN_DISCOUNT_FIELD:\n            return {\n                ...state,\n                scans: {\n                    ...state.scans,\n                    original_discount: action.payload\n                }\n            }\n\n        case MedicalScanTypes.UPDATE_RUNNING_SCAN_AMOUNT_FIELD:\n            return {\n                ...state,\n                scans: {\n                    ...state.scans,\n                    running_amount: action.payload\n                }\n            }\n        case MedicalScanTypes.UPDATE_RUNNING_SCAN_DISCOUNT_FIELD:\n            return {\n                ...state,\n                scans: {\n                    ...state.scans,\n                    running_discount: action.payload\n                }\n            }\n        case MedicalScanTypes.UPDATE_CURRENT_SCAN_AMOUNT_FIELD:\n            return {\n                ...state,\n                scans: {\n                    ...state.scans,\n                    current_amount: action.payload\n                }\n            }\n        case MedicalScanTypes.UPDATE_CURRENT_SCAN_DISCOUNT_FIELD:\n            return {\n                ...state,\n                scans: {\n                    ...state.scans,\n                    current_discount: action.payload\n                }\n            };\n        case MedicalScanTypes.UPDATE_CURRENT_SCAN_MODALITY:\n            return {\n                ...state,\n                scans: {\n                    ...state.scans,\n                    current_modality: action.payload\n                }\n            };\n            return {\n                ...state,\n                scans: {\n                    ...state.scans,\n                    current_discount: action.payload\n                }\n            };\n        default:\n            return {\n                ...state\n            }\n    }\n}\n\n\nexport default medicalScanReducer;\n\n\n","/Users/qingyuan/athena/src/redux/medical-scan/medical-scan.types.js",[],"/Users/qingyuan/athena/src/redux/medical-scan/medical-scan.actions.js",[],"/Users/qingyuan/athena/src/redux/appointments/appointments.reducer.js",[],"/Users/qingyuan/athena/src/redux/appointments/appointments.types.js",[],"/Users/qingyuan/athena/src/redux/appointments/appointments.actions.js",["185","186"],"import AppointmentsTypes from './appointments.types';\nimport axios from 'axios';\n\nimport { \n    updatePreparedTransactionBalance,\n    updatePreparedTransactionCounts\n } from '../transactions/transactions.actions';\n\nexport const getAllUserAppointments = () => {\n    return async (dispatch) => {\n        const res = await axios.get('/appointments');\n        dispatch({\n            type: AppointmentsTypes.GET_ALL_APPOINTMENTS,\n            payload: res.data\n        });\n    }\n}\n\nexport const addUserAppointments = (form_data) => {\n    return async (dispatch) => {\n        try {\n            const res = await axios.post('/appointments', form_data);\n            dispatch({\n                type: AppointmentsTypes.ADD_USER_APPOINTMENTS,\n                payload: form_data\n            });\n        } catch (e) {\n            \n        }\n    }\n};\n\nexport const setFilteredAppointments = (data) => {\n    return dispatch => {\n        dispatch({\n            type: AppointmentsTypes.SET_FILTERED_APPOINTMENTS,\n            payload: data\n        })\n    }\n};\n\nexport const updateBalanceInAppointments = (\n    appointment_id, new_balance, new_counts,\n    new_status=null\n) => {\n    return async dispatch => {\n        const appointment = await axios.get(`/appointments/${appointment_id}`);\n        let newData = appointment.data;\n        newData.billSummary.currentBalance = new_balance;\n        newData.billSummary.counts = new_counts;\n        newData.billStatus = new_status ? new_status : newData.billStatus;\n        \n        const res = await axios.put(`/appointments/${appointment_id}`, newData);\n\n        dispatch({\n            type: AppointmentsTypes.UPDATE_BALANCE\n        });\n        dispatch({\n            type: AppointmentsTypes.UPDATE_COUNTS\n        });\n        \n        // prepareTransactionInfo is the source data in our transaction page,\n        // so we need to dispatch it whenever we want to see new updates\n        dispatch(updatePreparedTransactionBalance(new_balance));\n        dispatch(updatePreparedTransactionCounts(new_counts));\n    }\n};\n\n\n","/Users/qingyuan/athena/src/components/appointments/appointments.component.js",["187","188","189"],"import React, { useEffect } from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport Header from '../header/header.component';\nimport AppointmentsTopBar from \"./appointments.top.bar.component\";\nimport AppointmentsBottomTable from \"./appointments.bottom.table.component\";\nimport { getAllUserAppointments } from '../../redux/appointments/appointments.actions';\n\nimport '../medical-scan-deatils/medical-scan-details.styles.scss';\nimport './appointments.styles.scss';\n\n\nconst Appointments = ({ history, getAllUserAppointments }) => {\n    useEffect(() => {\n        getAllUserAppointments()\n    }, []);\n    \n    return (\n        <div>\n            <Header text='View Appointment' />\n            <div class=\"container\">\n                <AppointmentsTopBar />\n                <AppointmentsBottomTable />\n            </div>\n        </div>\n    )\n};\n\n// const mapStateToProps = (state) => ({\n//     all_appointments: state.appointments.all_appointments\n// })\n\nexport default connect(null, { getAllUserAppointments })(Appointments);\n\n\n\n","/Users/qingyuan/athena/src/components/appointments/appointments.top.bar.component.js",[],"/Users/qingyuan/athena/src/components/appointments/appointments.bottom.table.component.js",["190","191","192"],"import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\n\nimport { prepareTransactionInfo } from '../../redux/transactions/transactions.actions';\n\nconst AppointmentsBottomTable = ({ history, all_appointments, filterInfo, prepareTransactionInfo }) => {\n\n    const columns = [{\n        dataField: 'id',\n        text: 'Sno'\n    }, {\n        dataField: 'name',\n        text: 'Patient Name'\n    }, {\n        dataField: 'age_gender',\n        text: 'Age-Gender'\n    }, {\n        dataField: 'appointmentDate',\n        text: 'Appointment Date'\n    }, {\n        dataField: 'balance',\n        text: 'Balance Amount'\n    }, {\n        dataField: 'billStatus',\n        text: 'Action'\n    }];\n\n    const rowEvents = {\n        onClick: (e, row, rowIndex) => {\n            prepareTransactionInfo(row.id);\n        }\n    };\n\n    const transformAppointments = (all_appointments, filterInfo) => {\n        const filteredData = getFilterdData(filterInfo, all_appointments);\n        console.log(filteredData)\n        if (filteredData) {\n            return filteredData.map((appointment) => ({\n                id: appointment.id,\n                name: appointment.userInfo.name,\n                age_gender: appointment.userInfo.age.concat('-', appointment.userInfo.gender),\n                appointmentDate: appointment.userInfo.appointmentDate,\n                // TODO: need to minus pre transactions\n                balance: appointment.billSummary.currentBalance,\n                billStatus: appointment.billStatus === 'Fully Billed'\n                    ? appointment.billStatus\n                    : <Link to='/transactions'>Click To Pay</Link>\n            }))\n        } else {\n            return [{}]\n        }\n    };\n\n\n    const matches = (text, key, fieldObject, isDate) => {\n        if (isDate) {\n            // compare dates \n            const [from_date, to_date] = key;\n            if (!(from_date in fieldObject) && !(to_date in fieldObject)) {\n                return true\n            } else if (!(from_date in fieldObject) && to_date in fieldObject) {\n                return Date.parse(text) <= Date.parse(fieldObject[to_date])\n            } else if (from_date in fieldObject && !(to_date in fieldObject)) {\n                return Date.parse(text) >= Date.parse(fieldObject[from_date])\n            } else {\n                return Date.parse(text) >= Date.parse(fieldObject[from_date]) &&\n                    Date.parse(text) <= Date.parse(fieldObject[to_date])\n            }\n\n        }\n        // else if(key='status') {\n        //     if (fieldObject.key === '')\n        // } \n        else {\n            if (!(key in fieldObject)) {\n                return true\n            } else {\n                return text.toLowerCase().indexOf(fieldObject[key].toLowerCase()) > -1;\n            }\n        }\n    }\n\n    const getFilterdData = (filterInfo, appointments) => {\n        let nonEmptyFields = Object.entries(filterInfo).filter(field => field[1] !== \"\");\n        if (nonEmptyFields.length === 0) {\n            return appointments\n        } else {\n            nonEmptyFields = Object.fromEntries(nonEmptyFields);\n            const data =  appointments.filter((appointment) => \n                matches(appointment.userInfo.name, \"search_text\", nonEmptyFields, false)\n                &&\n                matches(\n                    appointment.userInfo.appointmentDate,\n                    [\"from_date\", \"to_date\"],\n                    nonEmptyFields,\n                    true\n                )\n                ||\n                // TODO\n                matches(appointment.billStatus, \"status\", nonEmptyFields, false)\n            );\n            return data\n        }\n    };\n\n    return (\n        <div className='table-components appointment-table'>\n            <div className='medical-detail-table'>\n                {\n                    all_appointments\n                        ? <BootstrapTable\n                            keyField='id'\n                            data={transformAppointments(all_appointments, filterInfo)}\n                            columns={columns}\n                            //selectRow={selectRow}\n                            bstriped\n                            hover\n                            condensed\n                            rowClasses=\"custom-row-class\"\n                            headerClasses=\"custom-header-class\"\n                            rowEvents={ rowEvents }\n                            pagination={paginationFactory()}\n                        />\n                        : <h2>No Appointments Yet!</h2>\n                }\n            </div>\n        </div>\n    )\n};\n\nconst mapStateToProps = (state) => ({\n    all_appointments: state.appointments.all_appointments,\n    filterInfo: state.filterInfo\n})\n\nexport default connect(mapStateToProps, { prepareTransactionInfo })(AppointmentsBottomTable);","/Users/qingyuan/athena/src/redux/filter-info/filter-info.actions.js",[],"/Users/qingyuan/athena/src/redux/filter-info/filter-info.types.js",[],"/Users/qingyuan/athena/src/redux/filter-info/filter-info.reducer.js",[],"/Users/qingyuan/athena/src/components/transactions-page/transactions-page.component.js",["193","194","195","196"],"import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\n\nimport Header from '../header/header.component'\nimport TransactionsPageTop from './transactions.top.component';\nimport TransactionsPageBottom from './transactions.bottom.component';\nimport { getPreTransactions } from '../../redux/transactions/transactions.actions';\nimport { getAllUserAppointments } from '../../redux/appointments/appointments.actions';\n//import '../medical-scan-deatils/medical-scan-details.styles.scss';\nimport './transactions-page.component.styles.scss';\n\nconst TransactionsPage = ({ getPreTransactions }) => {\n    useEffect(() => {\n        getPreTransactions()\n    }, [])\n    return (\n        <div>\n            <Header text='Patient Billing' />\n            <div className='transactions__container'>\n                <TransactionsPageTop />\n                <TransactionsPageBottom />\n            </div>\n        </div>\n    )\n};\n\nexport default connect(null, { getPreTransactions })(TransactionsPage);","/Users/qingyuan/athena/src/components/transactions-page/transactions.top.component.js",["197","198","199"],"import React from 'react';\nimport { connect } from 'react-redux';\n\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\n\nimport TransactionsPageTopPrevTable from './transactions-page-tables/transactions-page-prev-table.component';\nimport TransactionsPageTopCurrentTable from './transactions-page-tables/transactions-page-current-table.component';\n\nconst TransactionsPageTop = () => {\n    return (\n        <div className=\"top-components\">\n            <div className=\"top-components__container\">\n                <div className=\"current--billing__container\">\n                    <TransactionsPageTopCurrentTable />\n                </div>\n                <div className=\"previous--billing__container\">\n                    <TransactionsPageTopPrevTable />\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default TransactionsPageTop;","/Users/qingyuan/athena/src/components/transactions-page/transactions.bottom.component.js",["200"],"import React from 'react';\nimport { connect } from 'react-redux';\n\nimport TransactionsPageBottomForm from './transactions-pages-form/transactions-pages-form.component';\nconst TransactionsPageBottom = () => {\n    return (\n        <div className=\"bottom-components\">\n            <TransactionsPageBottomForm />\n        </div>\n    )\n};\n\nexport default TransactionsPageBottom;","/Users/qingyuan/athena/src/components/transactions-page/transactions-page-tables/transactions-page-prev-table.component.js",[],"/Users/qingyuan/athena/src/components/transactions-page/transactions-page-tables/transactions-page-current-table.component.js",["201","202","203"],"import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\n//import { getAllUserAppointments } from '../../../redux/appointments/appointments.actions';\n\nconst TransactionsPageTopCurrentTable = ({ prepared_transaction_info }) => {\n    const {\n        appointment_id,\n        name,\n        age_gender,\n        total_amount,\n        total_discount,\n        total_amount_after_discount,\n        currentBalance\n    } = prepared_transaction_info;\n\n    // useEffect(() => {\n    //     getAllUserAppointments()\n    // }, [currentBalance]);\n    console.log(\n        appointment_id,\n        name,\n        age_gender,\n        total_amount,\n        total_discount,\n        total_amount_after_discount,\n        currentBalance\n    )\n\n    return (\n        <div>\n            <h2>Current Billing Status</h2>\n            {\n                !appointment_id\n                    ? \"\"\n                    : <div>\n                        <table className='current--billing__container--table'>\n                            <tbody>\n                                <tr>\n                                    <th>Patient Name</th>\n                                    <td>{name}</td>\n                                </tr>\n                                <tr>\n                                    <th>ID</th>\n                                    <td>{appointment_id}</td>\n                                </tr>\n                                <tr>\n                                    <th>Age/Gender</th>\n                                    <td>{age_gender}</td>\n                                </tr>\n                                <tr>\n                                    <th>Total Amount</th>\n                                    <td>{total_amount}</td>\n                                </tr>\n                                <tr>\n                                    <th>Discount</th>\n                                    <td>{total_discount}</td>\n                                </tr>\n                                <tr>\n                                    {/* TODO: pAID amount should come from all of preTransactions */}\n                                    <th>Paid Amount</th>\n                                    <td>{total_amount_after_discount - currentBalance}</td>\n                                </tr>\n                                <tr>\n                                    {/* TODO: Balance amount should come from total_amount_after_discount minus all of preTransactions */}\n                                    <th>Balance</th>\n                                    <td>{currentBalance}</td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n            }\n        </div>\n\n    )\n};\n\nconst mapStateToProps = (state) => ({\n    prepared_transaction_info: state.transactions.prepared_transaction_info\n})\n\nexport default connect(mapStateToProps, {})(TransactionsPageTopCurrentTable);","/Users/qingyuan/athena/src/redux/transactions/transactions.reducer.js",[],"/Users/qingyuan/athena/src/redux/transactions/transactions.types.js",[],"/Users/qingyuan/athena/src/redux/transactions/transactions.actions.js",["204"],"import TransactionsTypes from './transactions.types';\nimport axios from \"axios\";\n\nexport const prepareTransactionInfo = (id) => {\n    return async dispatch => {\n        const res = await axios.get(`/appointments?id=${id}`);\n        const data = res.data[0];\n        const transformedData = {\n            appointment_id: data.id,\n            name: data.userInfo.name,\n            age_gender: data.userInfo.age.concat('Y/', data.userInfo.gender),\n            total_amount: data.billSummary.totalAmount,\n            total_discount: data.billSummary.totalDiscount,\n            total_amount_after_discount: data.billSummary.totalAmountAfterDiscount,\n            currentBalance: data.billSummary.currentBalance,\n            counts: data.billSummary.counts\n        };\n        dispatch({\n            type: TransactionsTypes.PREPARE_TRANSACTION_INFO,\n            payload: transformedData\n        })\n    }\n};\n\nexport const getPreTransactions = () => {\n    return async dispatch => {\n        const res = await axios.get('/transactions');\n        dispatch({\n            type: TransactionsTypes.GET_PREVIOUS_TRANSACTIONS,\n            payload: res.data\n        })\n    }\n}\n\n\n// TODO: once data get posted, we also need to update amount and balance in `appointments` table\nexport const saveTransaction = (data) => {\n    return async dispatch => {\n        const res = await axios.post('/transactions', data);\n        dispatch({\n            type: TransactionsTypes.SAVE_TRANSACTION\n        })\n    }\n};\n\nexport const updatePreparedTransactionBalance = (new_bal) => {\n    return dispatch => {\n        dispatch({\n            type: TransactionsTypes.UPDATE_PREPARED_TRANSACTION_INFO_BALANCE,\n            payload: new_bal\n        })\n    }\n}\n\nexport const updatePreparedTransactionCounts = (new_bal) => {\n    return dispatch => {\n        dispatch({\n            type: TransactionsTypes.UPDATE_PREPARED_TRANSACTION_INFO_COUNTS,\n            payload: new_bal\n        })\n    }\n}\n\n\n","/Users/qingyuan/athena/src/components/transactions-page/transactions-pages-form/transactions-pages-form.component.js",["205"],"import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport './transactions-pages-form.styles.scss';\n\nimport { saveTransaction, getPreTransactions } from '../../../redux/transactions/transactions.actions';\nimport {\n    updateBalanceInAppointments,\n    getAllUserAppointments\n} from '../../../redux/appointments/appointments.actions';\n\nconst TransactionsPageBottomForm = ({\n    saveTransaction,\n    prepared_transaction_info,\n    updateBalanceInAppointments,\n    getAllUserAppointments,\n    history,\n    getPreTransactions }) => {\n\n    const [currentTransaction, setCurrentTransaction] = useState({\n        appointment_id: '',\n        user_name: '',\n        payable_amount: '',\n        payment_mode: 'card',\n        cardholder_name: '',\n        cardholder_number: '',\n        expire_date: '',\n        cvs: '',\n        date: ''\n    });\n\n    const getCurrentDate = () => {\n        const today = new Date();\n        const dd = String(today.getDate()).padStart(2, '0');\n        const mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        const yyyy = today.getFullYear();\n        return yyyy + '-' + mm + '-' + dd;\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        // Prepare transaction info\n        const currentDate = getCurrentDate();\n        currentTransaction.date = currentDate;\n        currentTransaction.appointment_id = prepared_transaction_info.appointment_id;\n        currentTransaction.user_name = prepared_transaction_info.name;\n        const currentBalance = prepared_transaction_info.currentBalance\n        const value = parseInt(currentTransaction.payable_amount);\n        const counts = prepared_transaction_info.counts;\n\n        // calculate new balance and validate it\n        const newBalance = currentBalance - value;\n        const isMeetMinimum = !currentTransaction.payable_amount ||\n            value < currentBalance * 0.2;\n\n        if (isMeetMinimum) {\n            alert(\"Please pay at least 20% of your total amount\")\n        }\n        else {\n            // must at least 20% totalAmount (and cannot overpay)\n            if (counts === 0) {\n                if (newBalance < 0) {\n                    alert('Sorry! We cannot process this transaction!')\n                } else if (newBalance === 0) {\n                    history.push('/appointments');\n                };\n                saveTransaction(currentTransaction);\n                updateBalanceInAppointments(\n                    prepared_transaction_info.appointment_id,\n                    newBalance,\n                    counts + 1\n                );\n\n                // must at least 20% totalAmount (and cannot overpay)\n            } else if (counts === 1) {\n                if (newBalance < 0) {\n                    alert('Sorry! We cannot process this transaction!')\n                } else if (newBalance === 0) {\n                    history.push('/appointments');\n                };\n                saveTransaction(currentTransaction);\n                updateBalanceInAppointments(\n                    prepared_transaction_info.appointment_id,\n                    newBalance,\n                    counts + 1,\n                    \n                );\n\n                // check all left balance and set the payable_amount limit\n            } else {\n                // TODO: means already made 2 trans, current one is third\n                if (newBalance !== 0) {\n                    alert('Sorry! You have to pay all rest of Balance this time!')\n                } else if (counts === 3) {\n                    alert('Sorry! We cannot process this transaction!')\n                }\n                else {\n                    const new_status = 'Fully Billed';\n                    saveTransaction(currentTransaction);\n                    updateBalanceInAppointments(\n                        prepared_transaction_info.appointment_id,\n                        newBalance,\n                        counts + 1,\n                        new_status\n                    );\n                    history.push('/appointments');\n                }\n            }\n        };\n        getPreTransactions();\n\n    };\n\n    const onChange = (e) => {\n        const { name, value } = e.target;\n        setCurrentTransaction({\n            ...currentTransaction,\n            [name]: value\n        });\n    };\n\n    return (\n        <div>\n            <form className=\"bottom-components__form\" onSubmit={handleSubmit}>\n                <div className=\"bottom-components__form--row1\">\n                    <label htmlFor=\"payable_amount\">Payable Amount:</label>\n                    <input\n                        type=\"number\"\n                        id='payable_amount'\n                        name='payable_amount'\n                        onChange={onChange}\n                        required\n                    />\n                </div>\n                <div className=\"bottom-components__form--row2\">\n                    <label htmlFor=\"payment_mode\">Payment Mode:</label>\n                    <select type=\"number\" id='payment_mode' name='payment_mode' onChange={onChange} required>\n                        <option value=\"card\">Card</option>\n                        <option value=\"cash\">Cash</option>\n                    </select>\n                </div>\n                {\n                    currentTransaction.payment_mode === 'card'\n                        ? <div>\n                            <div className=\"bottom-components__form--row3\">\n                                <input\n                                    type=\"text\"\n                                    id='cardholder_name'\n                                    name='cardholder_name'\n                                    placeholder=\"Cardholder's Name\"\n                                    onChange={onChange}\n                                    required\n                                />\n                                <input\n                                    type=\"number\"\n                                    id='cardholder_number'\n                                    name='cardholder_number'\n                                    placeholder=\"Cardholder's Number\"\n                                    onChange={onChange}\n                                    required\n                                />\n                            </div>\n                            <div className=\"bottom-components__form--row4\">\n                                <span>Expire</span>\n                                <input type=\"text\" id='expire_date' name='expire_date' onChange={onChange} />\n                                <input type=\"text\" id='cvs' name='cvs' onChange={onChange} />\n                            </div>\n                        </div>\n                        : ''\n                }\n                <div className=\"bottom-components__form--row5\">\n                    <button type='submit'>Save</button>\n                </div>\n            </form>\n        </div>\n    )\n};\n\nconst mapStateToProps = (state) => ({\n    prepared_transaction_info: state.transactions.prepared_transaction_info\n})\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        {\n            saveTransaction,\n            getPreTransactions,\n            updateBalanceInAppointments,\n            getAllUserAppointments\n        })(TransactionsPageBottomForm)\n    );",{"ruleId":"206","replacedBy":"207"},{"ruleId":"208","replacedBy":"209"},{"ruleId":"210","severity":1,"message":"211","line":1,"column":27,"nodeType":"212","messageId":"213","endLine":1,"endColumn":36},{"ruleId":"210","severity":1,"message":"214","line":9,"column":5,"nodeType":"212","messageId":"213","endLine":9,"endColumn":11},{"ruleId":"210","severity":1,"message":"215","line":8,"column":8,"nodeType":"212","messageId":"213","endLine":8,"endColumn":20},{"ruleId":"216","severity":1,"message":"217","line":34,"column":7,"nodeType":"218","endLine":34,"endColumn":17,"suggestions":"219"},{"ruleId":"210","severity":1,"message":"220","line":5,"column":8,"nodeType":"212","messageId":"213","endLine":5,"endColumn":19},{"ruleId":"210","severity":1,"message":"215","line":8,"column":8,"nodeType":"212","messageId":"213","endLine":8,"endColumn":20},{"ruleId":"210","severity":1,"message":"211","line":1,"column":17,"nodeType":"212","messageId":"213","endLine":1,"endColumn":26},{"ruleId":"210","severity":1,"message":"221","line":6,"column":5,"nodeType":"212","messageId":"213","endLine":6,"endColumn":25},{"ruleId":"210","severity":1,"message":"222","line":11,"column":10,"nodeType":"212","messageId":"213","endLine":11,"endColumn":32},{"ruleId":"210","severity":1,"message":"223","line":48,"column":17,"nodeType":"212","messageId":"213","endLine":48,"endColumn":21},{"ruleId":"210","severity":1,"message":"224","line":49,"column":15,"nodeType":"212","messageId":"213","endLine":49,"endColumn":27},{"ruleId":"216","severity":1,"message":"225","line":85,"column":15,"nodeType":"226","endLine":90,"endColumn":6},{"ruleId":"210","severity":1,"message":"227","line":1,"column":17,"nodeType":"212","messageId":"213","endLine":1,"endColumn":25},{"ruleId":"210","severity":1,"message":"228","line":1,"column":17,"nodeType":"212","messageId":"213","endLine":1,"endColumn":25},{"ruleId":"229","severity":1,"message":"230","line":109,"column":13,"nodeType":"231","messageId":"232","endLine":115,"endColumn":15},{"ruleId":"210","severity":1,"message":"233","line":22,"column":19,"nodeType":"212","messageId":"213","endLine":22,"endColumn":22},{"ruleId":"210","severity":1,"message":"233","line":53,"column":15,"nodeType":"212","messageId":"213","endLine":53,"endColumn":18},{"ruleId":"210","severity":1,"message":"234","line":2,"column":10,"nodeType":"212","messageId":"213","endLine":2,"endColumn":14},{"ruleId":"210","severity":1,"message":"235","line":2,"column":16,"nodeType":"212","messageId":"213","endLine":2,"endColumn":24},{"ruleId":"216","severity":1,"message":"236","line":17,"column":8,"nodeType":"218","endLine":17,"endColumn":10,"suggestions":"237"},{"ruleId":"210","severity":1,"message":"235","line":3,"column":16,"nodeType":"212","messageId":"213","endLine":3,"endColumn":24},{"ruleId":"238","severity":1,"message":"239","line":94,"column":17,"nodeType":"240","messageId":"241","endLine":94,"endColumn":19},{"ruleId":"238","severity":1,"message":"239","line":101,"column":17,"nodeType":"240","messageId":"241","endLine":101,"endColumn":19},{"ruleId":"210","severity":1,"message":"242","line":3,"column":8,"nodeType":"212","messageId":"213","endLine":3,"endColumn":22},{"ruleId":"210","severity":1,"message":"243","line":4,"column":8,"nodeType":"212","messageId":"213","endLine":4,"endColumn":25},{"ruleId":"210","severity":1,"message":"222","line":10,"column":10,"nodeType":"212","messageId":"213","endLine":10,"endColumn":32},{"ruleId":"216","severity":1,"message":"244","line":17,"column":8,"nodeType":"218","endLine":17,"endColumn":10,"suggestions":"245"},{"ruleId":"210","severity":1,"message":"246","line":2,"column":10,"nodeType":"212","messageId":"213","endLine":2,"endColumn":17},{"ruleId":"210","severity":1,"message":"242","line":4,"column":8,"nodeType":"212","messageId":"213","endLine":4,"endColumn":22},{"ruleId":"210","severity":1,"message":"243","line":5,"column":8,"nodeType":"212","messageId":"213","endLine":5,"endColumn":25},{"ruleId":"210","severity":1,"message":"246","line":2,"column":10,"nodeType":"212","messageId":"213","endLine":2,"endColumn":17},{"ruleId":"210","severity":1,"message":"211","line":1,"column":17,"nodeType":"212","messageId":"213","endLine":1,"endColumn":26},{"ruleId":"210","severity":1,"message":"242","line":4,"column":8,"nodeType":"212","messageId":"213","endLine":4,"endColumn":22},{"ruleId":"210","severity":1,"message":"243","line":5,"column":8,"nodeType":"212","messageId":"213","endLine":5,"endColumn":25},{"ruleId":"210","severity":1,"message":"233","line":39,"column":15,"nodeType":"212","messageId":"213","endLine":39,"endColumn":18},{"ruleId":"210","severity":1,"message":"211","line":1,"column":27,"nodeType":"212","messageId":"213","endLine":1,"endColumn":36},"no-native-reassign",["247"],"no-negated-in-lhs",["248"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'CustomButton' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setCurrentPatientInfo'. Either include it or remove the dependency array. If 'setCurrentPatientInfo' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["249"],"'PatientForm' is defined but never used.","'addMedicalScanRecord' is defined but never used.","'getAllUserAppointments' is defined but never used.","'name' is assigned a value but never used.","'filteredOnes' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'Children' is defined but never used.","'useState' is defined but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'res' is assigned a value but never used.","'Link' is defined but never used.","'Redirect' is defined but never used.","React Hook useEffect has a missing dependency: 'getAllUserAppointments'. Either include it or remove the dependency array. If 'getAllUserAppointments' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["250"],"no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'BootstrapTable' is defined but never used.","'paginationFactory' is defined but never used.","React Hook useEffect has a missing dependency: 'getPreTransactions'. Either include it or remove the dependency array. If 'getPreTransactions' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["251"],"'connect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"252","fix":"253"},{"desc":"254","fix":"255"},{"desc":"256","fix":"257"},"Update the dependencies array to be: [setCurrentPatientInfo, userInfo]",{"range":"258","text":"259"},"Update the dependencies array to be: [getAllUserAppointments]",{"range":"260","text":"261"},"Update the dependencies array to be: [getPreTransactions]",{"range":"262","text":"263"},[1018,1028],"[setCurrentPatientInfo, userInfo]",[647,649],"[getAllUserAppointments]",[794,796],"[getPreTransactions]"]